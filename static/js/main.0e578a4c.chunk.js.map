{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","cityRef","React","createRef","countryRef","searchWeather","e","preventDefault","result","city","_this","current","value","country","dataQuery","onSubmit","this","type","id","ref","htmlFor","defaultValue","Component","Error","message","Weather","viewResult","_this$props$result","name","weather","main","temp","toFixed","temp_max","temp_min","App","state","error","query","queryAPI","_this$state$query","url","concat","encodeURIComponent","console","log","fetch","then","respuesta","json","datos","setState","catch","prevProps","prevState","componentes_Error","componentes_Weather","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e578a4c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) =>{\r\n        return(\r\n\r\n                <div>\r\n                    <nav>\r\n                        <div className=\"nav-wrapper light-blue darken-2\">\r\n                        <a className=\"brand-logo\">{props.titulo}</a>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n\r\n        );\r\n};\r\nexport default Header;","import React , {Component} from 'react';\r\n\r\nclass Formulario extends Component{\r\n\r\n    // creamos refs\r\n    cityRef=React.createRef();\r\n    countryRef=React.createRef();\r\n\r\n\r\n    searchWeather =(e) =>{\r\n\r\n        e.preventDefault(); \r\n\r\n        const result = {\r\n            city : this.cityRef.current.value,\r\n            country : this.countryRef.current.value\r\n        }\r\n          \r\n\r\n            this.props.dataQuery(result);\r\n    }\r\n\r\n\r\n\r\n        render(){\r\n            return(\r\n                <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.searchWeather}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                    <input type=\"text\" id=\"ciudad\" ref={this.cityRef}/>\r\n                                    <label htmlFor=\"ciudad\">Ciudad:</label>\r\n                                    </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.countryRef}>\r\n                                    <option value=\"\" defaultValue>Elige un pais</option>\r\n                                    <option value=\"AR\">Argentina</option>\r\n                                    <option value=\"CO\">Colombia</option>\r\n                                    <option value=\"CR\">Costa Rica</option>\r\n                                    <option value=\"ES\">Espa√±a</option>\r\n                                    <option value=\"US\">Estados Unidos</option>\r\n                                    <option value=\"MX\">Mexico</option>\r\n                                    <option value=\"PE\">Peru</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\">Pais:</label>\r\n                                </div>        \r\n                                <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                                    <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar..\"/>\r\n                                </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n\r\n            )\r\n        }\r\n\r\n} \r\n\r\nexport default Formulario;","import React from 'react';\r\n    const Error =(props) =>{\r\n        return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 m6 offset-m3\">\r\n                            <div className=\"card-panel red darken-4 error\">\r\n                                    {props.message}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n\r\nexport default Error;","import React,{Component} from 'react';\r\n\r\nclass Weather extends Component{\r\n\r\n    viewResult=() =>{\r\n        const {name, weather, main} = this.props.result;\r\n\r\n        if(!name || !weather || !main) return null;\r\n\r\n        const kelvin = 273.15;\r\n\r\n\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                        <h2> Clima de: {name}</h2>\r\n                         <p className=\"temperatura\">\r\n                            Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                         </p>\r\n                         <p>Max. {main.temp_max - kelvin} &deg;C</p>\r\n                         <p>Max. {main.temp_min - kelvin} &deg;C</p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                {this.viewResult()}\r\n                \r\n            </div>       \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Weather from './componentes/Weather';\nclass App extends Component {\n\n    state ={\n      error: '',\n      query: {},\n      result : {}\n    }\n\n    componentDidMount(){\n      this.setState({\n        error: false\n      })\n    }\n\n    queryAPI  = () =>{\n      const {city, country} = this.state.query;\n      if(!city || !country) return null;\n\n      const appID = 'eead67f3295da3a59d0570fb003dabb6';\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)},${country}&appid=${appID}`;\n      console.log(url);\n\n      fetch(url)\n      .then(respuesta =>{\n        return respuesta.json();\n      })\n      .then(datos =>{\n        this.setState({\n          result: datos\n        })\n      })\n      .catch(error =>{\n        console.log(error);\n      })\n    }\n\n    componentDidUpdate(prevProps, prevState){\n      if(prevState.query != this.state.query){\n      this.queryAPI();\n    }}\n\n  dataQuery = result =>{\n    if(result.city ==='' || result.country === ''){\n      this.setState({\n        error: true\n      })\n    }else{\n      this.setState({\n        query : result,\n        error: false\n      })\n      \n    }\n  }\n\n  render() {\n\n      const error = this.state.error;\n       let result;\n       if(error){\n         result = <Error message=\"ambos campos son obligatorios\"/>\n       }else{\n        result = <Weather\n          result = {this.state.result}\n        />\n       }\n  \n\n    return (\n      <div className=\"app\">\n            <Header\n              titulo = \"Clima react\"\n            />\n            <Formulario\n            dataQuery={this.dataQuery}\n            />\n            {result}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}